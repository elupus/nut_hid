use wdk_sys::{
    FILE_ANY_ACCESS, FILE_DEVICE_KEYBOARD, METHOD_BUFFERED, METHOD_IN_DIRECT, METHOD_NEITHER,
    METHOD_OUT_DIRECT,
};

//
// #define CTL_CODE( DeviceType, Function, Method, Access ) ( ((DeviceType) << 16) | ((Access) << 14) | ((Function) << 2) | (Method) )
#[allow(non_snake_case)]
pub const fn CTL_CODE(device_type: u32, function: u32, method: u32, access: u32) -> u32 {
    return (device_type << 16) | (access << 14) | (function << 2) | method;
}

// Macro for defining HID ioctls
//
//#define HID_CTL_CODE(id)            CTL_CODE(FILE_DEVICE_KEYBOARD, (id), METHOD_NEITHER, FILE_ANY_ACCESS)
//#define HID_BUFFER_CTL_CODE(id)     CTL_CODE(FILE_DEVICE_KEYBOARD, (id), METHOD_BUFFERED, FILE_ANY_ACCESS)
//#define HID_IN_CTL_CODE(id)         CTL_CODE(FILE_DEVICE_KEYBOARD, (id), METHOD_IN_DIRECT, FILE_ANY_ACCESS)
//#define HID_OUT_CTL_CODE(id)        CTL_CODE(FILE_DEVICE_KEYBOARD, (id), METHOD_OUT_DIRECT, FILE_ANY_ACCESS)

#[allow(non_snake_case)]
pub const fn HID_CTL_CODE(id: u32) -> u32 {
    return CTL_CODE(FILE_DEVICE_KEYBOARD, id, METHOD_NEITHER, FILE_ANY_ACCESS);
}

#[allow(non_snake_case)]
pub const fn HID_BUFFER_CTL_CODE(id: u32) -> u32 {
    return CTL_CODE(FILE_DEVICE_KEYBOARD, id, METHOD_BUFFERED, FILE_ANY_ACCESS);
}

#[allow(non_snake_case)]
pub const fn HID_IN_CTL_CODE(id: u32) -> u32 {
    return CTL_CODE(FILE_DEVICE_KEYBOARD, id, METHOD_IN_DIRECT, FILE_ANY_ACCESS);
}

#[allow(non_snake_case)]
pub const fn HID_OUT_CTL_CODE(id: u32) -> u32 {
    return CTL_CODE(FILE_DEVICE_KEYBOARD, id, METHOD_OUT_DIRECT, FILE_ANY_ACCESS);
}

//
// IOCTLs supported by the upper edge of the HID class driver
//
pub const IOCTL_HID_GET_DRIVER_CONFIG: u32 = HID_BUFFER_CTL_CODE(100);
pub const IOCTL_HID_SET_DRIVER_CONFIG: u32 = HID_BUFFER_CTL_CODE(101);
pub const IOCTL_HID_GET_POLL_FREQUENCY_MSEC: u32 = HID_BUFFER_CTL_CODE(102);
pub const IOCTL_HID_SET_POLL_FREQUENCY_MSEC: u32 = HID_BUFFER_CTL_CODE(103);
pub const IOCTL_GET_NUM_DEVICE_INPUT_BUFFERS: u32 = HID_BUFFER_CTL_CODE(104);
pub const IOCTL_SET_NUM_DEVICE_INPUT_BUFFERS: u32 = HID_BUFFER_CTL_CODE(105);
pub const IOCTL_HID_GET_COLLECTION_INFORMATION: u32 = HID_BUFFER_CTL_CODE(106);
pub const IOCTL_HID_ENABLE_WAKE_ON_SX: u32 = HID_BUFFER_CTL_CODE(107);
pub const IOCTL_HID_SET_S0_IDLE_TIMEOUT: u32 = HID_BUFFER_CTL_CODE(108);

pub const IOCTL_HID_GET_COLLECTION_DESCRIPTOR: u32 = HID_CTL_CODE(100);
pub const IOCTL_HID_FLUSH_QUEUE: u32 = HID_CTL_CODE(101);

pub const IOCTL_HID_SET_FEATURE: u32 = HID_IN_CTL_CODE(100);
pub const IOCTL_HID_SET_OUTPUT_REPORT: u32 = HID_IN_CTL_CODE(101);

pub const IOCTL_HID_GET_FEATURE: u32 = HID_OUT_CTL_CODE(100);
pub const IOCTL_GET_PHYSICAL_DESCRIPTOR: u32 = HID_OUT_CTL_CODE(102);
pub const IOCTL_HID_GET_HARDWARE_ID: u32 = HID_OUT_CTL_CODE(103);
pub const IOCTL_HID_GET_INPUT_REPORT: u32 = HID_OUT_CTL_CODE(104);
pub const IOCTL_HID_GET_OUTPUT_REPORT: u32 = HID_OUT_CTL_CODE(105);

pub const IOCTL_HID_GET_MANUFACTURER_STRING: u32 = HID_OUT_CTL_CODE(110);
pub const IOCTL_HID_GET_PRODUCT_STRING: u32 = HID_OUT_CTL_CODE(111);
pub const IOCTL_HID_GET_SERIALNUMBER_STRING: u32 = HID_OUT_CTL_CODE(112);

pub const IOCTL_HID_GET_INDEXED_STRING: u32 = HID_OUT_CTL_CODE(120);
pub const IOCTL_HID_GET_MS_GENRE_DESCRIPTOR: u32 = HID_OUT_CTL_CODE(121);

pub const IOCTL_HID_ENABLE_SECURE_READ: u32 = HID_CTL_CODE(130);
pub const IOCTL_HID_DISABLE_SECURE_READ: u32 = HID_CTL_CODE(131);

pub const IOCTL_HID_DEVICERESET_NOTIFICATION: u32 = HID_CTL_CODE(140);

//
// Internal IOCTLs for the class/mini driver interface.
//
pub const IOCTL_HID_GET_DEVICE_DESCRIPTOR: u32 = HID_CTL_CODE(0);
pub const IOCTL_HID_GET_REPORT_DESCRIPTOR: u32 = HID_CTL_CODE(1);
pub const IOCTL_HID_READ_REPORT: u32 = HID_CTL_CODE(2);
pub const IOCTL_HID_WRITE_REPORT: u32 = HID_CTL_CODE(3);
pub const IOCTL_HID_GET_STRING: u32 = HID_CTL_CODE(4);
pub const IOCTL_HID_ACTIVATE_DEVICE: u32 = HID_CTL_CODE(7);
pub const IOCTL_HID_DEACTIVATE_DEVICE: u32 = HID_CTL_CODE(8);
pub const IOCTL_HID_GET_DEVICE_ATTRIBUTES: u32 = HID_CTL_CODE(9);
pub const IOCTL_HID_SEND_IDLE_NOTIFICATION_REQUEST: u32 = HID_CTL_CODE(10);

//
// Internal IOCTLs supported by UMDF HID minidriver.
//
pub const IOCTL_UMDF_HID_SET_FEATURE: u32 = HID_CTL_CODE(20);
pub const IOCTL_UMDF_HID_GET_FEATURE: u32 = HID_CTL_CODE(21);
pub const IOCTL_UMDF_HID_SET_OUTPUT_REPORT: u32 = HID_CTL_CODE(22);
pub const IOCTL_UMDF_HID_GET_INPUT_REPORT: u32 = HID_CTL_CODE(23);
pub const IOCTL_UMDF_GET_PHYSICAL_DESCRIPTOR: u32 = HID_CTL_CODE(24);

//
// Codes for HID-specific descriptor types, from HID USB spec.
//
pub const HID_HID_DESCRIPTOR_TYPE: u32 = 0x21;
pub const HID_REPORT_DESCRIPTOR_TYPE: u32 = 0x22;
pub const HID_PHYSICAL_DESCRIPTOR_TYPE: u32 = 0x23;

//
//  These are string IDs for use with IOCTL_HID_GET_STRING
//  They match the string field offsets in Chapter 9 of the USB Spec.
//
pub const HID_STRING_ID_IMANUFACTURER: u32 = 14;
pub const HID_STRING_ID_IPRODUCT: u32 = 15;
pub const HID_STRING_ID_ISERIALNUMBER: u32 = 16;
